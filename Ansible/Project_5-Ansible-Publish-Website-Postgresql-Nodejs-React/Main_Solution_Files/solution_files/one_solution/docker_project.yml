- name: install docker and config
  hosts: _development
  become: true
  tasks:
    - name: update all pkgs
      yum:
        name: "*"
        state: latest

    - name: Remove docker if installed from CentOS repo
      yum:
        name: "{{ item }}"
        state: removed
      loop:
        - docker
        - docker-client
        - docker-client-latest
        - docker-common
        - docker-latest
        - docker-latest-logrotate
        - docker-logrotate
        - docker-engine

    - name: Install yum utils
      yum: 
        name: yum-utils
        state: latest

    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker
      package:
        name: docker-ce
        state: latest

    - name: Install pip
      package:
        name: python3-pip
        state: present

    - name: Install docker sdk
      pip:
        name: docker

    - name: Add user ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

- name: postgre database config
  hosts: _ansible_postgresql
  become: true
  vars: 
    postgre_container: /home/ec2-user/postgresql
    container_name: felix_postgre
    image_name: felixcw/postgre
  tasks:
    - name: create build directory
      file:
        path: "{{ postgre_container }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: copy the sql script
      copy:
        src: /home/ec2-user/student_files/todo-app-pern/database/init.sql
        dest: "{{ postgre_container }}"

    - name: copy the Dockerfile
      copy:
        src: /home/ec2-user/student_files/todo-app-pern/database/Dockerfile
        dest: "{{ postgre_container }}"

    - name: remove {{ container_name }} container and {{ image_name }} if exists
      shell: "docker ps -q --filter 'name={{ container_name }}' && docker stop {{ container_name }} && docker rm -fv {{ container_name }} && docker image rm -f {{ image_name }} || echo 'Not Found'"

    - name: build container image
      docker_image:
        name: "{{ image_name }}"
        build:
          path: "{{ postgre_container }}"
        source: build
        state: present

    - name: Launch postgresql docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports: 
        - "5432:5432"
        env:
          POSTGRES_PASSWORD: "Pp123456789"    # secret.yml ile yapabilirdik vault, bir wide solution da oyle yaptik.
        volumes:
          - /db-data:/var/lib/postgresql/data
      register: docker_info

- name: Nodejs Server configuration
  hosts: _ansible_nodejs
  become: true
  vars: 
    container_path: /home/ec2-user/nodejs
    container_name: felix_nodejs
    image_name: felixcw/nodejs
  tasks:
    - name: create build directory
      file:
        path: "{{ container_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: copy files to the nodejs node
      copy:
        src: /home/ec2-user/student_files/todo-app-pern/server/
        dest: "{{ container_path }}"

    - name: copy the Dockerfile
      copy:
        src: /home/ec2-user/solution_files/wide_solution/nodejs_files/Dockerfile
        dest: "{{ container_path }}"

    - name: remove {{ container_name }} container and {{ image_name }} if exists
      shell: "docker ps -q --filter 'name={{ container_name }}' && docker stop {{ container_name }} && docker rm -fv {{ container_name }} && docker image rm -f {{ image_name }} || echo 'Not Found'"

    - name: build container image
      docker_image:
        name: "{{ image_name }}"
        build:
          path: "{{ container_path }}"
        source: build
        state: present

    - name: Launch postgresql docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
        - "5000:5000"

- name: React UI Server configuration
  hosts: _ansible_react
  become: true
  vars: 
    container_path: /home/ec2-user/react
    container_name: felix_react
    image_name: felixcw/react
  tasks:
    - name: create build directory
      file:
        path: "{{ container_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: copy files to the react node
      copy:
        src: /home/ec2-user/student_files/todo-app-pern/client/
        dest: "{{ container_path }}"

    - name: copy the Dockerfile
      copy:
        src: /home/ec2-user/solution_files/wide_solution/react_files/Dockerfile
        dest: "{{ container_path }}"

    - name: remove {{ container_name }} container and {{ image_name }} image if exists
      shell: "docker ps -q --filter 'name={{ container_name }}' && docker stop {{ container_name }} && docker rm -fv {{ container_name }} && docker image rm -f {{ image_name }} || echo 'Not Found'"

    - name: build container image
      docker_image:
        name: "{{ image_name }}"
        build:
          path: "{{ container_path }}"
        source: build
        state: present

    - name: Launch react docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
        - "3000:3000"